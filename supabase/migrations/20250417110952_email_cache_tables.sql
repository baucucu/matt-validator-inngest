-- Modify email_validation_cache table
ALTER TABLE email_validation_cache
ADD COLUMN response_data JSONB,
ADD COLUMN created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
ADD COLUMN updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- Create email_finding_cache table
CREATE TABLE email_finding_cache (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    company_name TEXT NOT NULL,
    run_record_id UUID NOT NULL REFERENCES run_records(id),
    response_data JSONB NOT NULL,
    expiration TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for faster lookups
CREATE INDEX idx_email_validation_cache_email_created ON email_validation_cache(email, created_at DESC);
CREATE INDEX idx_email_finding_cache_lookup ON email_finding_cache(first_name, last_name, company_name);
CREATE INDEX idx_email_finding_cache_domain ON email_finding_cache(domain);

-- Add trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_email_validation_cache_updated_at
    BEFORE UPDATE ON email_validation_cache
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_email_finding_cache_updated_at
    BEFORE UPDATE ON email_finding_cache
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 