-- Start transaction
BEGIN;

-- Drop existing tables if they exist
DROP TABLE IF EXISTS email_validation_cache;
DROP TABLE IF EXISTS company_validation_cache;
DROP TABLE IF EXISTS email_finding_cache;

-- Create email_validation_cache table
CREATE TABLE email_validation_cache (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email TEXT NOT NULL,
    run_record_id UUID NOT NULL REFERENCES run_records(id),
    data JSONB NOT NULL,
    expiration TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create email_finding_cache table
CREATE TABLE email_finding_cache (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    company_name TEXT NOT NULL,
    run_record_id UUID NOT NULL REFERENCES run_records(id),
    data JSONB NOT NULL,
    expiration TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create company_validation_cache table
CREATE TABLE company_validation_cache (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    company_name TEXT NOT NULL,
    company_domain TEXT,
    run_record_id UUID NOT NULL REFERENCES run_records(id),
    data JSONB NOT NULL,
    expiration TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes
CREATE INDEX idx_email_validation_cache_email ON email_validation_cache(email);
CREATE INDEX idx_email_finding_cache_lookup ON email_finding_cache(first_name, last_name, company_name);
CREATE INDEX idx_company_validation_cache_company ON company_validation_cache(company_name);
CREATE INDEX idx_company_validation_cache_domain ON company_validation_cache(company_domain);

-- Create trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers
CREATE TRIGGER update_email_validation_cache_updated_at
    BEFORE UPDATE ON email_validation_cache
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_email_finding_cache_updated_at
    BEFORE UPDATE ON email_finding_cache
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_company_validation_cache_updated_at
    BEFORE UPDATE ON company_validation_cache
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Insert test data
INSERT INTO email_validation_cache (email, run_record_id, expiration, data)
VALUES (
    'test@example.com',
    '00000000-0000-0000-0000-000000000000',
    NOW() + INTERVAL '30 days',
    '{"email_status": "valid", "message": "Test data"}'::jsonb
);

INSERT INTO email_finding_cache (first_name, last_name, company_name, run_record_id, expiration, data)
VALUES (
    'Test',
    'User',
    'Test Company',
    '00000000-0000-0000-0000-000000000000',
    NOW() + INTERVAL '7 days',
    '{"status": "found", "message": "Test data"}'::jsonb
);

INSERT INTO company_validation_cache (company_name, company_domain, run_record_id, expiration, data)
VALUES (
    'Test Company',
    'testcompany.com',
    '00000000-0000-0000-0000-000000000000',
    NOW() + INTERVAL '30 days',
    '{"company_status": "valid", "message": "Test data"}'::jsonb
);

-- Verify the data
SELECT * FROM email_validation_cache WHERE email = 'test@example.com';
SELECT * FROM email_finding_cache WHERE first_name = 'Test' AND last_name = 'User' AND company_name = 'Test Company';
SELECT * FROM company_validation_cache WHERE company_name = 'Test Company';

COMMIT; 